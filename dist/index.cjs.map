{"version":3,"sources":["../src/index.ts","../src/react/ChatEnabled.tsx"],"sourcesContent":["export { ChatEnabled } from \"./react/ChatEnabled\";\nexport type { ChatEnabledProps } from \"./react/ChatEnabled\";\n\n\n","import React, { useMemo, useState } from \"react\";\n\nexport type ChatEnabledTrigger = \"hover\" | \"focus\" | \"always\" | \"manual\";\n\nexport type ChatEnabledProps = {\n  children: React.ReactNode;\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  label?: string;\n  position?: \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\";\n  offset?: number;\n  icon?: React.ReactNode;\n  className?: string; // container className\n  containerStyle?: React.CSSProperties;\n  buttonClassName?: string;\n  buttonStyle?: React.CSSProperties;\n  buttonSize?: number; // px, default 36\n  zIndex?: number; // default 10\n  disabled?: boolean;\n  trigger?: ChatEnabledTrigger; // default 'hover'\n  open?: boolean; // used when trigger is 'manual'\n  onOpenChange?: (open: boolean) => void; // notifies visibility changes\n  renderButton?: (\n    props: React.ButtonHTMLAttributes<HTMLButtonElement> & {\n      visible: boolean;\n      ref: React.Ref<HTMLButtonElement>;\n    }\n  ) => React.ReactNode;\n};\n\nexport const ChatEnabled = React.forwardRef<HTMLButtonElement, ChatEnabledProps>(\n  (\n    {\n      children,\n      onClick,\n      label = \"Open chat\",\n      position = \"top-right\",\n      offset = 8,\n      icon,\n      className,\n      containerStyle,\n      buttonClassName,\n      buttonStyle,\n      buttonSize = 36,\n      zIndex = 10,\n      disabled = false,\n      trigger,\n      open,\n      onOpenChange,\n      renderButton,\n    },\n    ref\n  ) => {\n    const [isHoveredOrFocused, setIsHoveredOrFocused] = useState(false);\n\n    const resolvedTrigger: ChatEnabledTrigger = trigger ?? \"hover\";\n\n    const positionStyle = useMemo<React.CSSProperties>(() => {\n      const base: React.CSSProperties = { position: \"absolute\" };\n      const offsetPx = `${offset}px`;\n      switch (position) {\n        case \"top-left\":\n          return { ...base, top: offsetPx, left: offsetPx };\n        case \"top-right\":\n          return { ...base, top: offsetPx, right: offsetPx };\n        case \"bottom-left\":\n          return { ...base, bottom: offsetPx, left: offsetPx };\n        case \"bottom-right\":\n        default:\n          return { ...base, bottom: offsetPx, right: offsetPx };\n      }\n    }, [position, offset]);\n\n    const computedVisible = (() => {\n      if (resolvedTrigger === \"always\") return true;\n      if (resolvedTrigger === \"manual\") return Boolean(open);\n      // hover or focus: we use the same internal state\n      return isHoveredOrFocused;\n    })();\n\n    const notifyOpenChange = (next: boolean) => {\n      if (onOpenChange) onOpenChange(next);\n    };\n\n    const containerEventHandlers = {\n      onMouseEnter: resolvedTrigger === \"hover\" ? () => { setIsHoveredOrFocused(true); notifyOpenChange(true); } : undefined,\n      onMouseLeave: resolvedTrigger === \"hover\" ? () => { setIsHoveredOrFocused(false); notifyOpenChange(false); } : undefined,\n      onFocus: resolvedTrigger === \"focus\" ? () => { setIsHoveredOrFocused(true); notifyOpenChange(true); } : undefined,\n      onBlur: resolvedTrigger === \"focus\" ? () => { setIsHoveredOrFocused(false); notifyOpenChange(false); } : undefined,\n    } as const;\n\n    const buttonProps: React.ButtonHTMLAttributes<HTMLButtonElement> & { ref: typeof ref; visible: boolean } = {\n      type: \"button\",\n      \"aria-label\": label,\n      onClick,\n      className: buttonClassName,\n      disabled,\n      style: {\n        ...positionStyle,\n        zIndex,\n        width: buttonSize,\n        height: buttonSize,\n        borderRadius: 9999,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        border: \"1px solid rgba(0,0,0,0.08)\",\n        background: disabled ? \"#f3f4f6\" : \"white\",\n        color: disabled ? \"#9ca3af\" : undefined,\n        boxShadow:\n          \"0 2px 6px rgba(0,0,0,0.1), 0 1px 2px rgba(0,0,0,0.06)\",\n        cursor: disabled ? \"not-allowed\" : \"pointer\",\n        transition: \"opacity 120ms ease, transform 120ms ease\",\n        opacity: computedVisible ? 1 : 0,\n        transform: computedVisible ? \"scale(1)\" : \"scale(0.95)\",\n        pointerEvents: computedVisible ? \"auto\" : \"none\",\n        ...buttonStyle,\n      },\n      tabIndex: computedVisible ? 0 : -1,\n      \"aria-hidden\": computedVisible ? undefined : true,\n      ref,\n      visible: computedVisible,\n    };\n\n    return (\n      <div\n        className={className}\n        style={{ position: \"relative\", display: \"inline-block\", ...containerStyle }}\n        {...containerEventHandlers}\n      >\n        {children}\n        {renderButton ? (\n          renderButton(buttonProps)\n        ) : (\n          <button {...buttonProps}>\n            {icon ?? (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width={Math.max(12, Math.floor(buttonSize * 0.5))}\n                height={Math.max(12, Math.floor(buttonSize * 0.5))}\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M21 15a4 4 0 0 1-4 4H7l-4 4V7a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4z\" />\n              </svg>\n            )}\n          </button>\n        )}\n      </div>\n    );\n  }\n);\n\nChatEnabled.displayName = \"ChatEnabled\";\n\n// For convenience, also export a lower-cased alias for named import\n// Note: in JSX you must still use <ChatEnabled />, not <chatEnabled />\nexport const chatEnabled = ChatEnabled;\n\n\n"],"mappings":"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","names":["index_exports","__export","ChatEnabled","__toCommonJS","import_react","import_jsx_runtime","ChatEnabled","React","children","onClick","label","position","offset","icon","className","containerStyle","buttonClassName","buttonStyle","buttonSize","zIndex","disabled","trigger","open","onOpenChange","renderButton","ref","isHoveredOrFocused","setIsHoveredOrFocused","resolvedTrigger","positionStyle","base","offsetPx","computedVisible","notifyOpenChange","next","containerEventHandlers","buttonProps"]}